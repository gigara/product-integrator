name: Build and Release Artifacts

on:
  workflow_dispatch:
    inputs:
      build_linux:
        description: 'Build for Linux'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build for macOS'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build for Windows'
        required: false
        default: true
        type: boolean

jobs:
  compile:
    name: Compile
    runs-on: codebuild-wso2_product-integrator-${{ github.run_id }}-${{ github.run_attempt }}
    defaults:
      run:
        working-directory: lib/vscode
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: lib/vscode/.nvmrc
          cache: npm
          cache-dependency-path: lib/vscode/package-lock.json

      - name: Get latest lib/vscode rev
        id: vscode-rev
        run: echo "rev=$(git rev-parse HEAD:./lib/vscode)" >> $GITHUB_OUTPUT
  
      - name: Fetch prebuilt Code package from cache
        id: cache-vscode
        uses: actions/cache@v4
        with:
          path: lib/vscode-reh-web-*
          key: vscode-reh-package-v1-${{ steps.vscode-rev.outputs.rev }}-${{ hashFiles('patches/*.diff', 'ci/build/update-product.sh') }}

      - name: Fetch extensions from cache
        uses: actions/cache@v4
        with:
          path: lib/vscode/.build/extensions
          key: vscode-reh-extensions-v1-${{ steps.vscode-rev.outputs.rev }}-${{ hashFiles('patches/*.diff', 'ci/build/update-product.sh') }}

      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: quilt
          version: 1.0

      - name: Apply patches
        run: quilt push -a
  
      - name: Update product.json and branding
        working-directory: .
        run: |
          chmod +x ./ci/build/update-product.sh
          ./ci/build/update-product.sh

      - name: Install dependencies
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: '1'
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm ci

      - name: Mixin distro modules
        run: |
          node build/azure-pipelines/distro/mixin-npm || true
          node build/azure-pipelines/distro/mixin-quality || true

      - name: Install builtin extensions
        run: |
          npm run download-builtin-extensions

      - name: Compile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max_old_space_size=14000
        run: |
          npm exec -- npm-run-all -lp core-ci extensions-ci eslint valid-layers-check define-class-fields-check vscode-dts-compile-check tsec-compile-check

      - name: Compress compilation artifact
        run: |
          tar -cz --exclude='.build/node_modules_cache' --exclude='.build/node_modules_list.txt' --exclude='.build/distro' -f ../compilation.tar.gz $(ls -d .build out-* test/integration/browser/out test/smoke/out test/automation/out 2>/dev/null)

      - name: Build client (Linux)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run gulp vscode-linux-x64-min-ci
          ARCHIVE_PATH=../artifacts/vscode-linux-x64.tar.gz
          tar -czf "$ARCHIVE_PATH" -C .. VSCode-linux-x64
  
      - name: Build Linux packages (deb, rpm)
        run: |
          npm run gulp "vscode-linux-x64-prepare-deb"
          npm run gulp "vscode-linux-x64-build-deb"
          npm run gulp "vscode-linux-x64-prepare-rpm"
          npm run gulp "vscode-linux-x64-build-rpm"
          # Copy outputs
          cp .build/linux/deb/*/deb/*.deb ../artifacts/ || true
          cp .build/linux/rpm/*/*.rpm ../artifacts/ || true

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-linux
          path: |
            lib/vscode/../artifacts/*
          if-no-files-found: error

      - name: Upload compilation artifact
        uses: actions/upload-artifact@v4
        with:
          name: compilation
          path: lib/vscode/../compilation.tar.gz
          if-no-files-found: error

  build-macos:
    if: ${{ github.event.inputs.build_macos == 'true' }}
    name: Build (macOS)
    runs-on: macos-latest
    needs: compile
    defaults:
      run:
        working-directory: lib/vscode
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: lib/vscode/.nvmrc
          cache: npm
          cache-dependency-path: lib/vscode/package-lock.json

      - name: Download compilation artifact
        uses: actions/download-artifact@v4
        with:
          name: compilation
          path: .

      - name: Extract compilation output
        run: tar -xzf compilation.tar.gz

      - name: Validate Xcode tools (macOS)
        run: |
          xcode-select -p
          python3 -m pip install --user setuptools || true

      - name: Prepare artifacts dir
        run: |
          mkdir -p ../artifacts

      - name: Install dependencies
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: '1'
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm ci

      - name: Mixin distro modules
        run: |
          node build/azure-pipelines/distro/mixin-npm || true
          node build/azure-pipelines/distro/mixin-quality || true

      - name: Install builtin extensions
        run: |
          npm run download-builtin-extensions

      - name: Build client (macOS)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run gulp vscode-darwin-x64-min-ci
          ARCHIVE_PATH=../artifacts/VSCode-darwin-x64.zip
          (cd .. && zip -qry "$ARCHIVE_PATH" VSCode-darwin-x64)

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-darwin
          path: |
            lib/vscode/../artifacts/*
          if-no-files-found: error

  build-windows:
    if: ${{ github.event.inputs.build_windows == 'true' }}
    name: Build (Windows)
    runs-on: windows-latest
    needs: compile
    defaults:
      run:
        working-directory: lib/vscode
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: lib/vscode/.nvmrc
          cache: npm
          cache-dependency-path: lib/vscode/package-lock.json

      - name: Download compilation artifact
        uses: actions/download-artifact@v4
        with:
          name: compilation
          path: .

      - name: Extract compilation output
        shell: pwsh
        run: tar -xzf compilation.tar.gz

      - name: Prepare artifacts dir
        run: |
          mkdir -p ../artifacts

      - name: Install dependencies
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: '1'
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm ci

      - name: Mixin distro modules
        run: |
          node build/azure-pipelines/distro/mixin-npm || true
          node build/azure-pipelines/distro/mixin-quality || true

      - name: Install builtin extensions
        run: |
          npm run download-builtin-extensions

      - name: Build client (Windows)
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run gulp "vscode-win32-x64-min-ci"
          $archivePath = "../artifacts/VSCode-win32-x64.zip"
          Compress-Archive -Path ../VSCode-win32-x64/* -DestinationPath $archivePath -Force

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-win32
          path: |
            lib/vscode/../artifacts/*
          if-no-files-found: error
