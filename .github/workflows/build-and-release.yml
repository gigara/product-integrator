name: Build and Release Artifacts

on:
  workflow_dispatch:
    inputs:
      build_linux:
        description: 'Build for Linux'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build for macOS (Apple Silicon)'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build for Windows'
        required: false
        default: true
        type: boolean

jobs:
  compile:
    name: Compile
    runs-on: codebuild-wso2_product-integrator-${{ github.run_id }}-${{ github.run_attempt }}
    defaults:
      run:
        working-directory: lib/vscode
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: lib/vscode/.nvmrc
          cache: npm
          cache-dependency-path: lib/vscode/package-lock.json

      - name: Cache TypeScript compilation
        id: cache-typescript
        uses: actions/cache@v4
        with:
          path: |
            lib/vscode/out
            lib/vscode/out-*
            lib/vscode/.build/node_modules_cache
          key: typescript-${{ runner.os }}-${{ hashFiles('patches/*.diff', 'ci/build/update-product.sh', 'lib/vscode/package.json') }}
          restore-keys: |
            typescript-${{ runner.os }}-

      - name: Cache built-in extensions
        id: cache-extensions
        uses: actions/cache@v4
        with:
          path: |
            lib/vscode/.build/builtInExtensions
            lib/vscode/.build/extensions
          key: extensions-${{ runner.os }}-${{ hashFiles('patches/*.diff', 'ci/build/update-product.sh', 'lib/vscode/package.json') }}
          restore-keys: |
            extensions-${{ runner.os }}-

      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            lib/vscode/cli/target/
          key: cargo-${{ runner.os }}-${{ hashFiles('lib/vscode/cli/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Cache Linux sysroots
        uses: actions/cache@v4
        with:
          path: |
            lib/vscode/.build/sysroots
          key: sysroots-${{ runner.os }}-glibc-2.28-gcc
          restore-keys: |
            sysroots-${{ runner.os }}-

      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: build-essential g++ libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev python-is-python3 quilt
          version: 1.0

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          rustup target add x86_64-unknown-linux-gnu
  
      - name: Get latest lib/vscode rev
        id: vscode-rev
        run: echo "rev=$(git rev-parse HEAD:./lib/vscode)" >> $GITHUB_OUTPUT
  
      - name: Fetch prebuilt Code package from cache
        id: cache-vscode
        uses: actions/cache@v4
        with:
          path: lib/vscode-reh-web-*
          key: vscode-reh-package-v1-${{ steps.vscode-rev.outputs.rev }}-${{ hashFiles('patches/*.diff', 'ci/build/update-product.sh', 'lib/vscode/package.json') }}

      - name: Apply patches
        run: quilt push -a
  
      - name: Update product.json and branding
        working-directory: .
        run: |
          chmod +x ./ci/build/update-product.sh
          ./ci/build/update-product.sh

      - name: Install dependencies
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: '1'
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm ci

      - name: Mixin distro modules
        run: |
          node build/azure-pipelines/distro/mixin-npm || true
          node build/azure-pipelines/distro/mixin-quality || true

      - name: Install builtin extensions
        run: |
          if [ "${{ steps.cache-extensions.outputs.cache-hit }}" = "true" ]; then
            echo "✅ Extensions cache hit - using cached extensions"
          else
            echo "⬇️ Downloading built-in extensions"
            npm run download-builtin-extensions
          fi

      - name: Compile (with cache optimization)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.cache-typescript.outputs.cache-hit }}" = "true" ]; then
            echo "✅ TypeScript cache hit - using cached compilation"
            echo "Skipping core compilation, running validation only"
            npm exec -- npm-run-all -lp extensions-ci-pr eslint valid-layers-check define-class-fields-check vscode-dts-compile-check tsec-compile-check
          else
            echo "❌ TypeScript cache miss - full compilation required"
            echo "Running complete compilation pipeline"
            npm exec -- npm-run-all -lp core-ci-pr extensions-ci-pr eslint valid-layers-check define-class-fields-check vscode-dts-compile-check tsec-compile-check
          fi

      - name: Compress compilation artifact
        run: |
          tar -cz --exclude='.build/node_modules_cache' --exclude='.build/node_modules_list.txt' --exclude='.build/distro' -f ../compilation.tar.gz $(ls -d .build out-* test/integration/browser/out test/smoke/out test/automation/out 2>/dev/null)

      - name: Build client (Linux)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run gulp vscode-linux-x64-min-ci
          ARCHIVE_PATH=../artifacts/vscode-linux-x64.tar.gz
          mkdir -p ../artifacts
          tar -czf "$ARCHIVE_PATH" -C .. VSCode-linux-x64

      - name: Build CLI (Linux)
        run: |
          source "$HOME/.cargo/env"
          cd cli
          cargo build --release --bin=code

      - name: Mix in built CLI into client (Linux)
        run: |
          set -e
          CLI_BIN=./cli/target/release/code
          if [ ! -f "$CLI_BIN" ]; then
            echo "CLI binary not found at $CLI_BIN" >&2
            find ./cli/target -type f -name code 2>/dev/null || true
            exit 1
          fi
          CLI_APP_NAME=$(node -p "require('../VSCode-linux-x64/resources/app/product.json').tunnelApplicationName")
          mkdir -p ../VSCode-linux-x64/bin
          cp "$CLI_BIN" "../VSCode-linux-x64/bin/$CLI_APP_NAME"
          chmod +x "../VSCode-linux-x64/bin/$CLI_APP_NAME"

      - name: Setup sysroots for Linux build
        run: |
          set -e
          SYSROOT_ARCH="amd64"  # for x64 builds
          export VSCODE_SYSROOT_DIR="$(pwd)/.build/sysroots"
          
          # Download dependency check sysroot
          SYSROOT_ARCH="$SYSROOT_ARCH" VSCODE_SYSROOT_PREFIX="-glibc-2.28-gcc-8.5.0" node -e '(async () => { const { getVSCodeSysroot } = require("./build/linux/debian/install-sysroot.js"); await getVSCodeSysroot(process.env["SYSROOT_ARCH"]); })()'
          
          # Download RPM build sysroot  
          SYSROOT_ARCH="$SYSROOT_ARCH" VSCODE_SYSROOT_PREFIX="-glibc-2.28-gcc-10.5.0" node -e '(async () => { const { getVSCodeSysroot } = require("./build/linux/debian/install-sysroot.js"); await getVSCodeSysroot(process.env["SYSROOT_ARCH"]); })()'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Linux packages (deb, rpm)
        env:
          VSCODE_ARCH: x64
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # DEB build
          npm run gulp "vscode-linux-x64-prepare-deb"
          npm run gulp "vscode-linux-x64-build-deb"

          # Copy outputs
          cp .build/linux/deb/*/deb/*.deb ../artifacts/ || true

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-linux
          path: |
            lib/artifacts/*
          if-no-files-found: error

      - name: Upload compilation artifact
        uses: actions/upload-artifact@v4
        with:
          name: compilation
          path: lib/compilation.tar.gz
          if-no-files-found: error

  build-macos:
    if: ${{ github.event.inputs.build_macos == 'true' }}
    name: Build (macOS)
    runs-on: macos-latest
    needs: compile
    defaults:
      run:
        working-directory: lib/vscode
    strategy:
      matrix:
        arch: [arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: lib/vscode/.nvmrc
          cache: npm
          cache-dependency-path: lib/vscode/package-lock.json

      - name: Cache Rust toolchain (macOS)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            lib/vscode/cli/target/
          key: cargo-macos-${{ matrix.arch }}-${{ hashFiles('lib/vscode/cli/Cargo.lock') }}
          restore-keys: |
            cargo-macos-${{ matrix.arch }}-
            cargo-macos-

      - name: Cache native modules (macOS)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .build/node_modules_cache
          key: native-modules-macos-${{ matrix.arch }}-${{ hashFiles('lib/vscode/package-lock.json', 'patches/*.diff') }}
          restore-keys: |
            native-modules-macos-${{ matrix.arch }}-
            native-modules-macos-

      - name: Download compilation artifact
        uses: actions/download-artifact@v4
        with:
          name: compilation
          path: lib/vscode

      - name: Extract compilation output
        run: tar -xzf compilation.tar.gz

      - name: Validate Xcode tools (macOS)
        run: |
          xcode-select -p
          python3 -m pip install --user setuptools || true

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          # Add ARM64 target for cross-compilation
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            rustup target add aarch64-apple-darwin
          else
            rustup target add x86_64-apple-darwin
          fi

      - name: Prepare artifacts dir
        run: |
          mkdir -p ../artifacts

      - name: Install dependencies
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: '1'
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm ci

      - name: Mixin distro modules
        run: |
          node build/azure-pipelines/distro/mixin-npm || true
          node build/azure-pipelines/distro/mixin-quality || true

      - name: Install builtin extensions
        run: |
          npm run download-builtin-extensions

      - name: Build client (macOS ${{ matrix.arch }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run gulp vscode-darwin-${{ matrix.arch }}-min-ci
          ARCHIVE_PATH=../artifacts/VSCode-darwin-${{ matrix.arch }}.zip
          (cd .. && zip -qry "$ARCHIVE_PATH" VSCode-darwin-${{ matrix.arch }})

      - name: Build CLI (macOS ${{ matrix.arch }})
        run: |
          source "$HOME/.cargo/env"
          cd cli
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            cargo build --release --bin=code --target=aarch64-apple-darwin
            CLI_BIN=./target/aarch64-apple-darwin/release/code
          else
            cargo build --release --bin=code --target=x86_64-apple-darwin
            CLI_BIN=./target/x86_64-apple-darwin/release/code
          fi
          
          # Verify CLI binary was built
          if [ ! -f "$CLI_BIN" ]; then
            echo "CLI binary not found at $CLI_BIN" >&2
            find ./target -type f -name code 2>/dev/null || true
            exit 1
          fi
          
          # Copy CLI to build output
          CLI_APP_NAME=$(node -p "require('../VSCode-darwin-${{ matrix.arch }}/Contents/Resources/app/product.json').tunnelApplicationName")
          mkdir -p "../VSCode-darwin-${{ matrix.arch }}/Contents/Resources/app/bin"
          cp "$CLI_BIN" "../VSCode-darwin-${{ matrix.arch }}/Contents/Resources/app/bin/$CLI_APP_NAME"
          chmod +x "../VSCode-darwin-${{ matrix.arch }}/Contents/Resources/app/bin/$CLI_APP_NAME"

      - name: Re-package with CLI (macOS ${{ matrix.arch }})
        run: |
          # Re-create the zip with the CLI included
          ARCHIVE_PATH=../artifacts/VSCode-darwin-${{ matrix.arch }}.zip
          rm -f "$ARCHIVE_PATH"
          (cd .. && zip -qry "$ARCHIVE_PATH" VSCode-darwin-${{ matrix.arch }})

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-darwin-${{ matrix.arch }}
          path: |
            lib/artifacts/*
          if-no-files-found: error

  build-windows:
    if: ${{ github.event.inputs.build_windows == 'true' }}
    name: Build (Windows)
    runs-on: windows-latest
    needs: compile
    defaults:
      run:
        working-directory: lib/vscode
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: lib/vscode/.nvmrc
          cache: npm
          cache-dependency-path: lib/vscode/package-lock.json

      - name: Cache native modules (Windows)
        uses: actions/cache@v4
        with:
          path: |
            lib/vscode/node_modules
            lib/vscode/.build/node_modules_cache
          key: native-modules-windows-${{ hashFiles('lib/vscode/package-lock.json') }}
          restore-keys: |
            native-modules-windows-

      - name: Download compilation artifact
        uses: actions/download-artifact@v4
        with:
          name: compilation
          path: .

      - name: Extract compilation output
        shell: pwsh
        run: tar -xzf compilation.tar.gz

      - name: Prepare artifacts dir
        run: |
          mkdir -p ../artifacts

      - name: Install dependencies
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: '1'
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm ci

      - name: Mixin distro modules
        run: |
          node build/azure-pipelines/distro/mixin-npm || true
          node build/azure-pipelines/distro/mixin-quality || true

      - name: Install builtin extensions
        run: |
          npm run download-builtin-extensions

      - name: Build client (Windows)
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run gulp "vscode-win32-x64-min-ci"
          $archivePath = "../artifacts/VSCode-win32-x64.zip"
          Compress-Archive -Path ../VSCode-win32-x64/* -DestinationPath $archivePath -Force

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-win32
          path: |
            lib/vscode/../artifacts/*
          if-no-files-found: error

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [compile, build-macos, build-windows]
    if: always() && (needs.compile.result == 'success')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Create unified release artifact
        run: |
          mkdir -p release-artifacts
          
          # Copy Linux artifacts if available
          if [ -d "all-artifacts/artifacts-linux" ]; then
            cp all-artifacts/artifacts-linux/* release-artifacts/ || true
          fi
          
          # Copy macOS artifacts if available
          if [ -d "all-artifacts/artifacts-darwin-x64" ]; then
            cp all-artifacts/artifacts-darwin-x64/* release-artifacts/ || true
          fi
          if [ -d "all-artifacts/artifacts-darwin-arm64" ]; then
            cp all-artifacts/artifacts-darwin-arm64/* release-artifacts/ || true
          fi
          
          # Copy Windows artifacts if available
          if [ -d "all-artifacts/artifacts-win32" ]; then
            cp all-artifacts/artifacts-win32/* release-artifacts/ || true
          fi
          
          # List all created artifacts
          echo "Created release artifacts:"
          ls -la release-artifacts/

      - name: Upload unified release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wso2-integrator-release
          path: release-artifacts/*
          if-no-files-found: warn
